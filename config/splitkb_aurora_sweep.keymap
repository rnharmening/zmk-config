/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "zmk-helpers/helper.h"

// Source desired key-position labels
#include "zmk-helpers/key-labels/34.h" // 34 for aurora sweep

#include "keys_de.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand

#define KEYS_LT LT0 LT1 LT2 LT3 LT4  // left hand top row
#define KEYS_LM LM0 LM1 LM2 LM3 LM4  // left hand mid row
#define KEYS_LB LB0 LB1 LB2 LB3 LB4  // left hand bot row

#define KEYS_RT RT0 RT1 RT2 RT3 RT4  // right hand top row
#define KEYS_RM RM0 RM1 RM2 RM3 RM4  // right hand mid row
#define KEYS_RB RB0 RB1 RB2 RB3 RB4  // right hand bot row

#define THUMBS LH1 LH0 RH0 RH1 // thumbs

#define DEFAULT   0
#define SYMBOL    1
#define NAVIGA    2
#define FUNCTN    3
#define EXTRAS    4
#define GAME      5
#define GAME2     6
#define BLUETOOTH 7

#define SHORT_IDLE 120
#define MEDIUM_IDLE 200
#define LONG_IDLE 325

#define TMS 38

&lt {
   tapping-term-ms = <180>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS DE_UNDER DE_MINUS DEL BKSP>;
};

ZMK_BEHAVIOR(sel_from, macro,
    wait-ms = <10>;
    tap-ms = <16>;
    bindings = < &kp S &kp DE_E &kp DE_L &kp DE_E &kp DE_C &kp DE_T &kp SPACE  &kp DE_STAR &kp SPACE  &kp DE_F &kp DE_R &kp DE_O &kp DE_M &kp SPACE>;
)

ZMK_BEHAVIOR(befundung, macro,
    wait-ms = <10>;
    tap-ms = <16>;
    bindings = < &kp DE_B &kp DE_E &kp DE_F &kp DE_U &kp DE_N &kp DE_D &kp DE_U &kp DE_N &kp DE_G >;
)

ZMK_BEHAVIOR(usn, macro,
    wait-ms = <10>;
    tap-ms = <16>;
    bindings = < &kp DE_R &kp DE_H &kp DE_A &kp DE_R &kp DE_M &kp DE_E &kp DE_N &kp DE_I &kp DE_N &kp DE_G >;
)

// Tap dance for closing/opening parentheses etc.
#define TAP_DANCE_DELAY 190
ZMK_TAP_DANCE(td_lpb,
    tapping-term-ms = <TAP_DANCE_DELAY>;
    bindings = <&kp DE_LPAR>, <&kp DE_LBRC>, <&kp DE_LBKT>;
)

ZMK_TAP_DANCE(td_rpb,
    tapping-term-ms = <TAP_DANCE_DELAY>;
    bindings = <&kp DE_RPAR>, <&kp DE_RBRC>, <&kp DE_RBKT>;
)

ZMK_TAP_DANCE(td_nav_sft,
    tapping-term-ms = <TAP_DANCE_DELAY>;
    bindings = <&mo NAVIGA>, <&kp LSFT>;
)

// home row mods

ZMK_HOLD_TAP(fml,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <0>;
    require-prior-idle-ms = <SHORT_IDLE>;
    hold-trigger-key-positions = <KEYS_R THUMBS KEYS_LT KEYS_LB>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)
ZMK_HOLD_TAP(fmr,
    flavor = "balanced";
    tapping-term-ms = <220>;
    quick-tap-ms = <0>;
    require-prior-idle-ms = <SHORT_IDLE>;
    hold-trigger-key-positions = <KEYS_L THUMBS KEYS_RT KEYS_RB>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(sml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <0>;
    require-prior-idle-ms = <LONG_IDLE>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)
ZMK_HOLD_TAP(smr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <0>;
    require-prior-idle-ms = <LONG_IDLE>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

/ {

    behaviors {

        kpt: kp_tap_time {
            compatible = "zmk,behavior-macro-one-param";
            label = "KPT";
            tap-ms = <20>;  // tweak as needed
            #binding-cells = <1>;
            bindings = <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>;
        };

    };

    combos {
        compatible = "zmk,combos";

        combo_enter {
            timeout-ms = <TMS>;
            key-positions = <LH0 RH0>;
            layers = <DEFAULT>;
            bindings = <&kpt ENTER>;
        };

        combo_backspace {
            timeout-ms = <TMS>;
            key-positions = <RT2 RT3>;
            slow-release;
            layers = <DEFAULT>;
            bindings = <&kp BKSP>;
        };

        combo_delete {
            timeout-ms = <TMS>;
            key-positions = <RB2 RB3>;
            slow-release;
            require-prior-idle-ms = <SHORT_IDLE>;
            layers = <DEFAULT>;
            bindings = <&kp DEL>;
        };

        combo_tab {
            timeout-ms = <TMS>;
            key-positions = <LM1 LM2>;
            layers = <DEFAULT>;
            bindings = <&kp TAB>;
        };

        combo_esc {
            timeout-ms = <TMS>;
            key-positions = <RM1 RM2>;
            layers = <DEFAULT>;
            bindings = <&kpt ESC>;
        };

        combo_esc_gaming {
            timeout-ms = <TMS>;
            key-positions = <LT3 LT4>;
            layers = <GAME>;
            bindings = <&kpt ESC>;
        };

        combo_at {
            timeout-ms = <TMS>;
            key-positions = <LT2 LT3>;
            require-prior-idle-ms = <SHORT_IDLE>;
            layers = <DEFAULT>;
            bindings = <&kpt DE_AT>;
        };

        combo_caps {
            timeout-ms = <TMS>;
            key-positions = <LM0 RM0>;
            require-prior-idle-ms = <SHORT_IDLE>;
            layers = <DEFAULT>;
            bindings = <&kpt CAPS>;
        };

        combo_caps_word {
            timeout-ms = <TMS>;
            key-positions = <LM1 RM1>;
            layers = <DEFAULT>;
            bindings = <&caps_word>;
        };

        combo_usn {
            timeout-ms = <TMS>;
            key-positions = <LT1 RM0>;
            layers = <DEFAULT>;
            bindings = <&usn>;
        };


        // Layer Toggle combos
        combo_default {
            timeout-ms = <TMS>;
            key-positions = <RM1 RM2>;
            require-prior-idle-ms = <250>;
            layers = <NAVIGA SYMBOL FUNCTN EXTRAS GAME>;
            bindings = <&to DEFAULT>;
        };

        combo_navigation {
            timeout-ms = <TMS>;
            key-positions = <LB1 LB2 LB3>;
            require-prior-idle-ms = <250>;
            layers = <DEFAULT>;
            bindings = <&tog NAVIGA>;
        };

        combo_gaming {
            timeout-ms = <TMS>;
            key-positions = <LT1 LT2 LT3>;
            require-prior-idle-ms = <250>;
            layers = <DEFAULT>;
            bindings = <&tog GAME>;
        };
        
        combo_symbol {
            timeout-ms = <TMS>;
            key-positions = <RM4 RH0>;
            require-prior-idle-ms = <250>;
            layers = <DEFAULT SYMBOL>;
            bindings = <&tog SYMBOL>;
        };

        combo_function {
            timeout-ms = <TMS>;
            key-positions = <RM4 RH1>;
            require-prior-idle-ms = <250>;
            layers = <DEFAULT FUNCTN>;
            bindings = <&tog FUNCTN>;
        };
        
    };

    keymap {
        compatible = "zmk,keymap";

            default_layer {
        bindings = <
        &kp Q       &kp W       &kp E       &kp R        &kp T                       &kp DE_Z     &kp U       &kp I       &kp O       &kp P
        &kp A       &sml LALT S &fml LCTL D &fml LSFT F  &kp G                       &kp H        &fmr RSFT J &fmr RCTL K &smr LALT L &sl EXTRAS
        &kp DE_Y    &kp X       &kp C       &sml RGUI V  &sml RALT B                 &smr RALT N  &smr RGUI M &kp CMMA    &kp DOT     &key_repeat
                                &td_nav_sft              &kp SPC                     &mo SYMBOL              &lt FUNCTN K_APP
        >;
        };

            symbol_layer {
        bindings = <
        &kp DE_EURO    &kp DE_UNDER   &kp DE_DEG     &kp DE_ACUTE   &kp DE_CARET                   &kp DE_EXCL    &kp DE_LT      &kp DE_GT      &kp DE_EQUAL   &kp DE_AMPS
        &kp DE_BSLH    &kp DE_FSLH    &td_lpb        &td_rpb        &kp DE_STAR                    &kp DE_QMARK   &kp DE_COLON   &kp DE_SEMI    &kp DE_MINUS   &kp DE_MICRO
        &kp DE_HASH    &kp DE_DOLLAR  &kp DE_PIPE    &kp DE_TILDE   &kp DE_GRAVE                   &kp DE_PLUS    &kp DE_PERCENT &kp DE_DQT     &kp DE_SQT     &kp DE_SECT
                                            &caps_word              &trans                         &trans                        &trans
        >;
        };

            navigation_layer {
        bindings = <
        &trans      &trans       &trans       &trans        &trans               &trans      &trans       &trans       &trans       &trans    
        &kp PG_UP   &kp LC(LEFT) &kp UP       &kp LC(RIGHT) &kp HOME             &trans      &trans       &trans       &trans       &trans    
        &kp PG_DN   &kp LEFT     &kp DOWN     &kp RIGHT     &kp END              &trans      &trans       &trans       &trans       &trans    
                                 &trans                     &trans               &trans                   &mo BLUETOOTH          
        >;
        };

            function_layer {
        bindings = <
        &kp F11     &kp F12      &kp CMMA     &kp DOT       &trans                &kp DE_STAR   &kp DE_PLUS  &kp DE_MINUS &kp DE_SLASH &kp DE_EQUAL
        &kp N1      &sml LALT N2 &sml LCTL N3 &sml LSFT N4  &kp N5                &kp N6        &smr RSFT N7 &smr RCTL N8 &smr LALT N9 &kp N0
        &kp F1      &kp F2       &kp F3       &sml LGUI F4  &sml RALT F5          &smr RALT  F6 &smr RGUI F7 &kp F8       &kp F9       &kp F10
                                 &trans                     &trans                &trans                   &trans          
        >;
        };

            extra_layer {
        bindings = <
        &trans               &trans       &trans       &trans       &trans               &trans       &kp DE_U_UMLAUT  &trans       &kp DE_O_UMLAUT &trans
        &kp DE_A_UMLAUT      &kp DE_SZ    &trans       &trans       &trans               &trans       &trans           &trans       &trans          &trans
        &trans               &sel_from    &befundung   &trans       &trans               &trans       &kp DE_MU        &trans       &trans          &trans
                                          &trans                    &trans               &trans                    &trans          
        >;
        };

            game_layer {
        bindings = <
        &kp LALT    &kp Q        &kp W        &kp E        &kp R                 &trans      &trans       &trans       &trans       &trans       
        &kp LSFT    &kp A        &kp S        &kp D        &kp F                 &trans      &trans       &trans       &trans       &trans       
        &kp LCTL    &kp DE_Z     &kp X        &kp C        &kp V                 &trans      &trans       &trans       &trans       &trans       
                                 &mo GAME2                 &kp SPACE             &to DEFAULT              &trans          
        >;
        };

            game2_layer {
        bindings = <
        &trans      &kp N1       &kp N2       &kp N3       &kp T                 &trans      &trans       &trans       &trans       &trans
        &trans      &kp N4       &kp N5       &kp N6       &kp G                 &trans      &trans       &trans       &trans       &trans       
        &trans      &kp N7       &kp N8       &kp N9       &kp B                 &trans      &trans       &trans       &trans       &trans       
                                 &trans                    &trans                &trans                   &trans          
        >;
        };

            bluetooth_layer {
        bindings = <
        &trans      &trans       &trans       &trans       &trans                &trans       &trans       &trans       &trans       &bt BT_CLR
        &trans      &trans       &trans       &trans       &trans                &trans       &bt BT_NXT   &bt BT_PRV   &trans       &trans
        &trans      &trans       &trans       &trans       &trans                &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &trans
                                 &trans                    &trans                &trans                   &trans          
        >;
        };
    };
};
